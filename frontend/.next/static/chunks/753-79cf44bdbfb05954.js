"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[753],{4753:(e,t,a)=>{a.d(t,{SchedulingProvider:()=>h,s:()=>g,V:()=>m});var n=a(5155),s=a(2115),o=a(6441),r=a(745);class c{static getCachedContacts(){let e=Date.now();return this.contactsCache.length>0&&e-this.cacheTimestamp<this.CACHE_DURATION?this.contactsCache:null}static clearCache(){this.contactsCache=[],this.cacheTimestamp=0}static async getAllContacts(){try{let e=this.getCachedContacts();if(e)return e;let t=(await o.uH.get("/api/contacts")).data||[];return this.contactsCache=t,this.cacheTimestamp=Date.now(),t}catch(e){throw console.error("Failed to fetch contacts:",e),new r.uV({message:"Failed to load contacts",code:"CONTACTS_FETCH_ERROR",userMessage:"Unable to load your contacts. Please try again.",originalError:e,retryable:!0})}}static async getContactById(e){try{(0,r.Kf)({id:e},["id"],{id:"Contact ID"});let t=await o.uH.get("/api/contacts/".concat(e));if(!t.data)throw new r.uV({message:"Contact with ID ".concat(e," not found"),code:"CONTACT_NOT_FOUND",userMessage:"The requested contact was not found.",retryable:!1});return t.data}catch(t){if(t instanceof r.uV)throw t;throw console.error("Failed to fetch contact ".concat(e,":"),t),new r.uV({message:"Failed to load contact",code:"CONTACT_FETCH_ERROR",userMessage:"Unable to load the contact details. Please try again.",originalError:t,retryable:!0})}}static async createContact(e){try{var t,a;if((0,r.Kf)(e,["name","email","timezone"],{name:"Name",email:"Email",timezone:"Timezone"}),!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.email))throw new r.uV({message:"Invalid email format",code:"VALIDATION_ERROR",userMessage:"Please enter a valid email address.",retryable:!1});console.log("\uD83D\uDC65 Creating contact via API:",{contactData:e,timestamp:new Date().toISOString()});let n=await o.uH.post("/api/contacts",e);if(console.log("✅ Contact creation response:",{success:n.success,hasData:!!n.data,contactId:null==(t=n.data)?void 0:t._id,wasExisting:null==(a=n.data)?void 0:a.wasExisting}),n.data){let e=n.data.contact||n.data;return this.clearCache(),e}throw new r.uV({message:"Failed to create contact - no data returned",code:"CONTACT_CREATE_ERROR",userMessage:"Failed to create the contact. Please try again.",retryable:!0})}catch(e){if(e instanceof r.uV)throw e;throw console.error("Failed to create contact:",e),new r.uV({message:"Failed to create contact",code:"CONTACT_CREATE_ERROR",userMessage:"Unable to create the contact. Please check your information and try again.",originalError:e,retryable:!0})}}static async updateContact(e,t){try{if((0,r.Kf)({id:e},["id"],{id:"Contact ID"}),t.email&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t.email))throw new r.uV({message:"Invalid email format",code:"VALIDATION_ERROR",userMessage:"Please enter a valid email address.",retryable:!1});let a=await o.uH.put("/api/contacts/".concat(e),t);if(a.data)return this.clearCache(),a.data;throw new r.uV({message:"Failed to update contact - no data returned",code:"CONTACT_UPDATE_ERROR",userMessage:"Failed to update the contact. Please try again.",retryable:!0})}catch(t){if(t instanceof r.uV)throw t;throw console.error("Failed to update contact ".concat(e,":"),t),new r.uV({message:"Failed to update contact",code:"CONTACT_UPDATE_ERROR",userMessage:"Unable to update the contact. Please try again.",originalError:t,retryable:!0})}}static async deleteContact(e){try{(0,r.Kf)({id:e},["id"],{id:"Contact ID"}),await o.uH.delete("/api/contacts/".concat(e)),this.clearCache()}catch(t){if(t instanceof r.uV)throw t;throw console.error("Failed to delete contact ".concat(e,":"),t),new r.uV({message:"Failed to delete contact",code:"CONTACT_DELETE_ERROR",userMessage:"Unable to delete the contact. Please try again.",originalError:t,retryable:!0})}}static async getContactsByStatus(e){return(await this.getAllContacts()).filter(t=>t.status===e)}static async searchContacts(e){if(!e.trim())return this.getAllContacts();let t=await this.getAllContacts(),a=e.toLowerCase().trim();return t.filter(e=>e.name.toLowerCase().includes(a)||e.email.toLowerCase().includes(a))}static async getContactsStats(){try{let e=await o.uH.get("/api/contacts/stats");if(e.data)return e.data}catch(e){console.warn("Failed to fetch contact stats from backend, calculating locally:",e)}let e=await this.getAllContacts(),t={pending:0,slots_generated:0,email_sent:0,scheduled:0,completed:0,total:e.length};return e.forEach(e=>{t[e.status]++}),t}static async createMultipleContacts(e){try{if(!Array.isArray(e)||0===e.length)throw new r.uV({message:"No contacts provided",code:"VALIDATION_ERROR",userMessage:"Please provide at least one contact to create.",retryable:!1});e.forEach((e,t)=>{if((0,r.Kf)(e,["name","email","timezone"],{name:"Contact ".concat(t+1," Name"),email:"Contact ".concat(t+1," Email"),timezone:"Contact ".concat(t+1," Timezone")}),!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.email))throw new r.uV({message:"Invalid email format for contact ".concat(t+1),code:"VALIDATION_ERROR",userMessage:"Please enter a valid email address for contact ".concat(t+1,"."),retryable:!1})});let t=[],a=[];for(let n=0;n<e.length;n++)try{let a=await this.createContact(e[n]);t.push(a)}catch(t){let e=t instanceof r.uV?t.userMessage:"Unknown error";a.push({index:n,error:e})}if(a.length>0){let e=a.map(e=>"Contact ".concat(e.index+1,": ").concat(e.error)).join("; ");throw new r.uV({message:"Failed to create some contacts: ".concat(e),code:"BULK_CREATE_PARTIAL_ERROR",userMessage:"Some contacts could not be created: ".concat(e),retryable:!0})}return t}catch(e){if(e instanceof r.uV)throw e;throw console.error("Failed to create multiple contacts:",e),new r.uV({message:"Failed to create contacts",code:"BULK_CREATE_ERROR",userMessage:"Unable to create the contacts. Please try again.",originalError:e,retryable:!0})}}}c.contactsCache=[],c.cacheTimestamp=0,c.CACHE_DURATION=3e5;class l{static async createSchedulingSession(e,t,a){try{var n,s;let l=e.filter(e=>e.name.trim());if(0===l.length)throw new r.uV({message:"No valid contacts provided",code:"VALIDATION_ERROR",userMessage:"Please provide at least one contact with a name.",retryable:!1});let i=(await Promise.all(l.map(async e=>{var a,n,s,o,l,i;let d={name:e.name.trim(),email:(null==(a=e.email)?void 0:a.trim())||"",timezone:e.timezone,meetingPreferences:{duration:t,timeOfDay:"any"}};try{return await c.createContact(d)}catch(t){return console.error("❌ Failed to create contact ".concat(e.name,":"),{originalContact:e,transformedData:d,error:t instanceof Error?t.message:t,stack:t instanceof Error?t.stack:void 0,errorType:t instanceof r.uV?"AppError":"Unknown",timestamp:new Date().toISOString()}),t instanceof r.uV&&console.error("\uD83D\uDD0D AppError details for ".concat(e.name,":"),{code:t.code,userMessage:t.userMessage,retryable:t.retryable,originalError:null==(n=t.originalError)?void 0:n.message,context:t.context}),t&&"object"==typeof t&&"response"in t&&console.error("\uD83C\uDF10 Network error details for ".concat(e.name,":"),{status:null==(s=t.response)?void 0:s.status,statusText:null==(o=t.response)?void 0:o.statusText,data:null==(l=t.response)?void 0:l.data,headers:null==(i=t.response)?void 0:i.headers}),null}}))).filter(e=>null!==e);if(0===i.length){let t=l.length;throw console.error("All contact creation attempts failed:",{attempted:t,successful:0,originalContacts:e,validContacts:l}),new r.uV({message:"Failed to create any contacts (".concat(t," attempts failed)"),code:"CONTACT_CREATION_ERROR",userMessage:"Unable to create contacts in the database. Check your network connection and try again.",retryable:!0})}let d={contactIds:i.map(e=>e._id),slotsPerContact:3,dateRange:null==a?void 0:a.dateRange,consultantMode:(null==a?void 0:a.consultantMode)||!0},u=await o.uH.post("/api/scheduling",d);if(!u.success||!u.data)throw new r.uV({message:"Backend scheduling algorithm failed",code:"SCHEDULING_ALGORITHM_ERROR",userMessage:"Unable to generate time slots. Please try again.",retryable:!0});let g=u.data;return{sessionId:g.batchId||Date.now().toString(),participants:g.results.map(e=>{var t,a,n,s;return{id:null==(t=e.contact)?void 0:t.id,name:null==(a=e.contact)?void 0:a.name,timezone:null==(n=e.contact)?void 0:n.timezone,email:null==(s=e.contact)?void 0:s.email,timeSlots:(e.suggestedSlots||[]).map(e=>{var t;return(null==(t=e.displayTimes)?void 0:t.contact)||"".concat(e.start," - ").concat(e.end)})}}),metadata:{algorithm:g.algorithm||"advanced",totalContacts:(null==(n=g.statistics)?void 0:n.totalContacts)||i.length,successfullyScheduled:(null==(s=g.statistics)?void 0:s.totalSlots)||0}}}catch(e){if(e instanceof r.uV)throw e;throw console.error("Failed to create scheduling session:",e),new r.uV({message:"Failed to create scheduling session",code:"SCHEDULING_CREATE_ERROR",userMessage:"Unable to generate time slots. Please try again.",originalError:e,retryable:!0})}}static async getSchedulingSession(e){try{return(0,r.Kf)({sessionId:e},["sessionId"],{sessionId:"Session ID"}),(await o.uH.get("/api/scheduling/".concat(e))).data}catch(e){return console.error("Failed to get scheduling session:",e),null}}static saveSchedulingSession(e,t){try{localStorage.setItem("scheduling_session_".concat(e),JSON.stringify({...t,savedAt:new Date().toISOString()}))}catch(e){console.error("Failed to save scheduling session:",e)}}static loadSchedulingSession(e){try{{let t=localStorage.getItem("scheduling_session_".concat(e));return t?JSON.parse(t):null}}catch(e){return console.error("Failed to load scheduling session:",e),null}}static async confirmTimeSlots(e,t){try{if((0,r.Kf)({sessionId:e},["sessionId"],{sessionId:"Session ID"}),!Array.isArray(t)||0===t.length)throw new r.uV({message:"No selections provided",code:"VALIDATION_ERROR",userMessage:"Please select at least one time slot before confirming.",retryable:!1});return(await o.uH.post("/api/scheduling/confirm",{sessionId:e,selections:t,timestamp:new Date().toISOString()})).data}catch(e){if(e instanceof r.uV)throw e;throw console.error("Failed to confirm time slots:",e),new r.uV({message:"Failed to confirm time slots",code:"SCHEDULING_CONFIRM_ERROR",userMessage:"Unable to confirm meeting times. Please try again.",originalError:e,retryable:!0})}}static async getPendingEvents(){try{return(await o.uH.get("/api/scheduling/suggestions")).data||[]}catch(e){return console.error("Failed to get pending events:",e),[]}}static async clearPendingEvent(e){try{(0,r.Kf)({eventId:e},["eventId"],{eventId:"Event ID"}),await o.uH.delete("/api/scheduling/suggestions/".concat(e))}catch(e){if(e instanceof r.uV)throw e;throw console.error("Failed to clear pending event:",e),new r.uV({message:"Failed to clear pending event",code:"PENDING_EVENT_CLEAR_ERROR",userMessage:"Unable to clear event. Please try again.",originalError:e,retryable:!0})}}static formatTimeSlotForDisplay(e){try{let t=new Date(e.start),a=new Date(e.end),n=t.toLocaleDateString("en-US",{weekday:"short"}),s=t.toLocaleTimeString("en-US",{hour:"numeric",minute:t.getMinutes()?"2-digit":void 0,hour12:!0}),o=a.toLocaleTimeString("en-US",{hour:"numeric",minute:a.getMinutes()?"2-digit":void 0,hour12:!0});return"".concat(n," ").concat(s,"-").concat(o)}catch(t){return console.error("Failed to format time slot:",t),"".concat(e.start," - ").concat(e.end)}}static async checkBackendHealth(){try{let e=await o.uH.get("/api/health");return e.success&&!!e.data}catch(e){return console.error("Backend health check failed:",e),!1}}static generateMockSchedulingData(e){let t=Date.now().toString(),a=["Mon 9-10am","Wed 2-3pm","Fri 11-12pm"],n=e.filter(e=>e.name.trim()).map(e=>({id:e.id,name:e.name,timezone:e.timezone,email:e.email,timeSlots:[...a]}));return{sessionId:t,participants:n,metadata:{algorithm:"mock_fallback",totalContacts:n.length,successfullyScheduled:n.length}}}}var i=a(5731);class d{static async getPendingEvents(){try{return(await i.F.get("/pending-events")).data.data||[]}catch(e){return console.error("Failed to get pending events:",e),[]}}static async createPendingEvents(e){try{let t=await i.F.post("/pending-events/bulk",{events:e,timestamp:new Date().toISOString()});return{created:t.data.data.created||[],blocked:t.data.data.blocked||[]}}catch(e){throw console.error("Failed to create pending events:",e),Error("Unable to create pending events. Please try again.")}}static async clearPendingEvent(e){try{await i.F.delete("/pending-events/".concat(e))}catch(e){throw console.error("Failed to clear pending event:",e),Error("Unable to cancel pending event. Please try again.")}}static async markAsScheduled(e,t){try{await i.F.patch("/pending-events/".concat(e,"/scheduled"),{calendarEventId:t,scheduledAt:new Date().toISOString()})}catch(e){throw console.error("Failed to mark event as scheduled:",e),Error("Unable to update event status. Please try again.")}}static async getBlockedTimeSlots(){try{return(await i.F.get("/pending-events/blocked-slots")).data.data.data||[]}catch(e){return console.error("Failed to get blocked time slots:",e),[]}}static async bulkClearPendingEvents(e){try{await i.F.post("/pending-events/bulk-clear",{eventIds:e,timestamp:new Date().toISOString()})}catch(e){throw console.error("Failed to bulk clear pending events:",e),Error("Unable to clear pending events. Please try again.")}}static async cleanupStaleEvents(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:7;try{let t=await i.F.post("/pending-events/cleanup",{olderThanDays:e,timestamp:new Date().toISOString()});return{cleaned:t.data.data.cleaned||0,remaining:t.data.data.remaining||0}}catch(e){throw console.error("Failed to cleanup stale events:",e),Error("Unable to cleanup old events. Please try again.")}}static async checkTimeSlotConflict(e,t,a){try{return(await i.F.post("/pending-events/check-conflict",{startTime:e,endTime:t,timezone:a})).data.data}catch(e){return console.error("Failed to check time slot conflict:",e),{hasConflict:!1}}}static async getPendingEventsStats(){try{return(await i.F.get("/pending-events/stats")).data.data}catch(e){return console.error("Failed to get pending events stats:",e),{total:0,byStatus:{pending:0,scheduled:0,cancelled:0},recentActivity:0}}}}let u=(0,s.createContext)(void 0),g=()=>{let e=(0,s.useContext)(u);if(void 0===e)throw Error("useScheduling must be used within a SchedulingProvider");return e},h=e=>{let{children:t}=e,[a,o]=(0,s.useState)(null),[r,c]=(0,s.useState)(!1),[i,g]=(0,s.useState)(null),[h,m]=(0,s.useState)([]),y=async(e,t)=>{c(!0),g(null);try{let a;await l.checkBackendHealth()?a=await l.createSchedulingSession(e,t):(console.warn("Backend unavailable, using mock data"),a=l.generateMockSchedulingData(e));let n={...a,contacts:e,duration:t,selectedSlots:[],createdAt:new Date().toISOString()};return o(n),l.saveSchedulingSession(a.sessionId,n),a.sessionId}catch(t){let e=t instanceof Error?t.message:"Failed to create scheduling session";throw g(e),Error(e)}finally{c(!1)}},w=async e=>{c(!0),g(null);try{let t=l.loadSchedulingSession(e);if(t||(t=await l.getSchedulingSession(e)),!t)return g("Scheduling session not found"),null;{let e={sessionId:t.sessionId,contacts:[],duration:t.duration,participants:t.participants,createdAt:new Date().toISOString()};return o(e),e}}catch(e){return g(e instanceof Error?e.message:"Failed to load scheduling session"),null}finally{c(!1)}},p=(e,t)=>{if(a&&a.sessionId===e){let n={...a,...t};o(n),l.saveSchedulingSession(e,n)}},f=async e=>{if(!a||!a.selectedSlots)throw Error("No session or slots selected");c(!0),g(null);try{var t,n,s,o,r;let c=a.selectedSlots.map(t=>{var n;let s=null==(n=a.participants)?void 0:n.find(e=>e.id===t.contactId);return{sessionId:e,contactName:(null==s?void 0:s.name)||"Unknown Contact",contactEmail:null==s?void 0:s.email,selectedSlot:t.selectedSlot,timezone:(null==s?void 0:s.timezone)||"America/New_York",duration:a.duration}}),l=await d.createPendingEvents(c);p(e,{selectedSlots:[],metadata:{algorithm:(null==(t=a.metadata)?void 0:t.algorithm)||"confirmed",totalContacts:(null==(n=a.metadata)?void 0:n.totalContacts)||(null==(s=a.participants)?void 0:s.length)||0,successfullyScheduled:(null==(o=a.metadata)?void 0:o.successfullyScheduled)||(null==(r=a.participants)?void 0:r.length)||0,confirmedEvents:l.created,blockedSlots:l.blocked}}),await v()}catch(t){let e=t instanceof Error?t.message:"Failed to confirm scheduling";throw g(e),Error(e)}finally{c(!1)}},v=async()=>{try{let e=await d.getPendingEvents();m(e)}catch(e){console.error("Failed to load pending events:",e)}},S=async e=>{c(!0),g(null);try{await d.clearPendingEvent(e),m(t=>t.filter(t=>t.id!==e))}catch(t){let e=t instanceof Error?t.message:"Failed to clear pending event";throw g(e),Error(e)}finally{c(!1)}};return(0,s.useEffect)(()=>{},[]),(0,n.jsx)(u.Provider,{value:{currentSession:a,isLoading:r,error:i,createSession:y,loadSession:w,updateSession:p,clearSession:()=>{o(null),g(null)},selectSlot:(e,t)=>{if(!a)return;let n=[...(a.selectedSlots||[]).filter(t=>t.contactId!==e),{contactId:e,selectedSlot:t}];p(a.sessionId,{selectedSlots:n})},removeSlotSelection:e=>{if(!a)return;let t=(a.selectedSlots||[]).filter(t=>t.contactId!==e);p(a.sessionId,{selectedSlots:t})},getSelectedSlots:()=>{var e;return(null==a||null==(e=a.selectedSlots)?void 0:e.map(e=>({contactId:e.contactId,selectedSlot:e.selectedSlot})))||[]},confirmScheduling:f,pendingEvents:h,loadPendingEvents:v,clearPendingEvent:S,setError:e=>{g(e)},clearError:()=>{g(null)}},children:t})},m=()=>{var e,t,a,n;let{currentSession:s}=g();return{hasValidSession:!!s,hasParticipants:!!(null==s||null==(e=s.participants)?void 0:e.length),hasSelections:!!(null==s||null==(t=s.selectedSlots)?void 0:t.length),isReadyForConfirmation:!!((null==s||null==(a=s.participants)?void 0:a.length)&&(null==s||null==(n=s.selectedSlots)?void 0:n.length)&&s.selectedSlots.length===s.participants.length)}}}}]);